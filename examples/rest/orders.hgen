alias Id = String & { type: "uuid" };

struct Product {
  id: Id,
  name: String,
  price: Float32,
  stock: Int32,
}

struct Order {
  id: Id,
  productId: Id,
  amount: Int32,
  status: OrderStatus,
}

enum OrderStatus {
  PENDING,
  CONFIRMED,
  TRANSIT,
  ARRIVED,
}

service OrderService {
  create(productId: Id, amount: Id) -> Order {
    rest: {
      method: "POST",
      uri: "/orders",
    },
    auth: {
      scopes: ["orders:write"],
    },
    name: "Place Order",
    description: "Orders the given amount of products.",
  },

  getById(id: Id) -> Order {
    rest: {
      method: "POST",
      uri: "/orders/{id}",
    },
    auth: {
      scopes: ["orders:read"],
    },
    name: "Get Order",
    description: "Returns the order associated with the given id.",
  },

  getAllPending() -> List<Order> {
    rest: {
      method: "POST",
      uri: "/orders/pending",
    },
    auth: {
      scopes: ["orders:read"],
    },
    name: "Get All Pending Orders",
    description: "Returns all pending orders.",
  }
}
